/*! For license information please see tracker.js.LICENSE.txt */
(()=>{var t={765:function(t,e,n){t=n.nmd(t),function(t,e,r){"use strict";var i=function(t,e,n){n=o.extend({},o.options,n);var r=o.runValidations(t,e,n);if(r.some((function(t){return o.isPromise(t.error)})))throw new Error("Use validate.async if you want support for promises");return i.processValidationResults(r,n)},o=i;o.extend=function(t){return[].slice.call(arguments,1).forEach((function(e){for(var n in e)t[n]=e[n]})),t},o.extend(i,{version:{major:0,minor:13,patch:1,metadata:null,toString:function(){var t=o.format("%{major}.%{minor}.%{patch}",o.version);return o.isEmpty(o.version.metadata)||(t+="+"+o.version.metadata),t}},Promise:"undefined"!=typeof Promise?Promise:null,EMPTY_STRING_REGEXP:/^\s*$/,runValidations:function(t,e,n){var r,i,s,a,u,f,c,l=[];for(r in(o.isDomElement(t)||o.isJqueryElement(t))&&(t=o.collectFormValues(t)),e)for(i in s=o.getDeepObjectValue(t,r),a=o.result(e[r],s,t,r,n,e)){if(!(u=o.validators[i]))throw c=o.format("Unknown validator %{name}",{name:i}),new Error(c);f=a[i],(f=o.result(f,s,t,r,n,e))&&l.push({attribute:r,value:s,validator:i,globalOptions:n,attributes:t,options:f,error:u.call(u,s,f,r,t,n)})}return l},processValidationResults:function(t,e){t=o.pruneEmptyErrors(t,e),t=o.expandMultipleErrors(t,e),t=o.convertErrorMessages(t,e);var n=e.format||"grouped";if("function"!=typeof o.formatters[n])throw new Error(o.format("Unknown format %{format}",e));return t=o.formatters[n](t),o.isEmpty(t)?void 0:t},async:function(t,e,n){var r=(n=o.extend({},o.async.options,n)).wrapErrors||function(t){return t};!1!==n.cleanAttributes&&(t=o.cleanAttributes(t,e));var i=o.runValidations(t,e,n);return new o.Promise((function(s,a){o.waitForResults(i).then((function(){var u=o.processValidationResults(i,n);u?a(new r(u,n,t,e)):s(t)}),(function(t){a(t)}))}))},single:function(t,e,n){return n=o.extend({},o.single.options,n,{format:"flat",fullMessages:!1}),o({single:t},{single:e},n)},waitForResults:function(t){return t.reduce((function(t,e){return o.isPromise(e.error)?t.then((function(){return e.error.then((function(t){e.error=t||null}))})):t}),new o.Promise((function(t){t()})))},result:function(t){var e=[].slice.call(arguments,1);return"function"==typeof t&&(t=t.apply(null,e)),t},isNumber:function(t){return"number"==typeof t&&!isNaN(t)},isFunction:function(t){return"function"==typeof t},isInteger:function(t){return o.isNumber(t)&&t%1==0},isBoolean:function(t){return"boolean"==typeof t},isObject:function(t){return t===Object(t)},isDate:function(t){return t instanceof Date},isDefined:function(t){return null!=t},isPromise:function(t){return!!t&&o.isFunction(t.then)},isJqueryElement:function(t){return t&&o.isString(t.jquery)},isDomElement:function(t){return!!t&&!(!t.querySelectorAll||!t.querySelector)&&(!(!o.isObject(document)||t!==document)||("object"==typeof HTMLElement?t instanceof HTMLElement:t&&"object"==typeof t&&null!==t&&1===t.nodeType&&"string"==typeof t.nodeName))},isEmpty:function(t){var e;if(!o.isDefined(t))return!0;if(o.isFunction(t))return!1;if(o.isString(t))return o.EMPTY_STRING_REGEXP.test(t);if(o.isArray(t))return 0===t.length;if(o.isDate(t))return!1;if(o.isObject(t)){for(e in t)return!1;return!0}return!1},format:o.extend((function(t,e){return o.isString(t)?t.replace(o.format.FORMAT_REGEXP,(function(t,n,r){return"%"===n?"%{"+r+"}":String(e[r])})):t}),{FORMAT_REGEXP:/(%?)%\{([^\}]+)\}/g}),prettify:function(t){return o.isNumber(t)?100*t%1==0?""+t:parseFloat(Math.round(100*t)/100).toFixed(2):o.isArray(t)?t.map((function(t){return o.prettify(t)})).join(", "):o.isObject(t)?o.isDefined(t.toString)?t.toString():JSON.stringify(t):(t=""+t).replace(/([^\s])\.([^\s])/g,"$1 $2").replace(/\\+/g,"").replace(/[_-]/g," ").replace(/([a-z])([A-Z])/g,(function(t,e,n){return e+" "+n.toLowerCase()})).toLowerCase()},stringifyValue:function(t,e){return(e&&e.prettify||o.prettify)(t)},isString:function(t){return"string"==typeof t},isArray:function(t){return"[object Array]"==={}.toString.call(t)},isHash:function(t){return o.isObject(t)&&!o.isArray(t)&&!o.isFunction(t)},contains:function(t,e){return!!o.isDefined(t)&&(o.isArray(t)?-1!==t.indexOf(e):e in t)},unique:function(t){return o.isArray(t)?t.filter((function(t,e,n){return n.indexOf(t)==e})):t},forEachKeyInKeypath:function(t,e,n){if(o.isString(e)){var r,i="",s=!1;for(r=0;r<e.length;++r)switch(e[r]){case".":s?(s=!1,i+="."):(t=n(t,i,!1),i="");break;case"\\":s?(s=!1,i+="\\"):s=!0;break;default:s=!1,i+=e[r]}return n(t,i,!0)}},getDeepObjectValue:function(t,e){if(o.isObject(t))return o.forEachKeyInKeypath(t,e,(function(t,e){if(o.isObject(t))return t[e]}))},collectFormValues:function(t,e){var n,r,i,s,a,u,f={};if(o.isJqueryElement(t)&&(t=t[0]),!t)return f;for(e=e||{},s=t.querySelectorAll("input[name], textarea[name]"),n=0;n<s.length;++n)if(i=s.item(n),!o.isDefined(i.getAttribute("data-ignored"))){var c=i.name.replace(/\./g,"\\\\.");u=o.sanitizeFormValue(i.value,e),"number"===i.type?u=u?+u:null:"checkbox"===i.type?i.attributes.value?i.checked||(u=f[c]||null):u=i.checked:"radio"===i.type&&(i.checked||(u=f[c]||null)),f[c]=u}for(s=t.querySelectorAll("select[name]"),n=0;n<s.length;++n)if(i=s.item(n),!o.isDefined(i.getAttribute("data-ignored"))){if(i.multiple)for(r in u=[],i.options)(a=i.options[r])&&a.selected&&u.push(o.sanitizeFormValue(a.value,e));else{var l=void 0!==i.options[i.selectedIndex]?i.options[i.selectedIndex].value:"";u=o.sanitizeFormValue(l,e)}f[i.name]=u}return f},sanitizeFormValue:function(t,e){return e.trim&&o.isString(t)&&(t=t.trim()),!1!==e.nullify&&""===t?null:t},capitalize:function(t){return o.isString(t)?t[0].toUpperCase()+t.slice(1):t},pruneEmptyErrors:function(t){return t.filter((function(t){return!o.isEmpty(t.error)}))},expandMultipleErrors:function(t){var e=[];return t.forEach((function(t){o.isArray(t.error)?t.error.forEach((function(n){e.push(o.extend({},t,{error:n}))})):e.push(t)})),e},convertErrorMessages:function(t,e){var n=[],r=(e=e||{}).prettify||o.prettify;return t.forEach((function(t){var i=o.result(t.error,t.value,t.attribute,t.options,t.attributes,t.globalOptions);o.isString(i)?("^"===i[0]?i=i.slice(1):!1!==e.fullMessages&&(i=o.capitalize(r(t.attribute))+" "+i),i=i.replace(/\\\^/g,"^"),i=o.format(i,{value:o.stringifyValue(t.value,e)}),n.push(o.extend({},t,{error:i}))):n.push(t)})),n},groupErrorsByAttribute:function(t){var e={};return t.forEach((function(t){var n=e[t.attribute];n?n.push(t):e[t.attribute]=[t]})),e},flattenErrorsToArray:function(t){return t.map((function(t){return t.error})).filter((function(t,e,n){return n.indexOf(t)===e}))},cleanAttributes:function(t,e){function n(t,e,n){return o.isObject(t[e])?t[e]:t[e]=!!n||{}}return o.isObject(e)&&o.isObject(t)?function t(e,n){if(!o.isObject(e))return e;var r,i,s=o.extend({},e);for(i in e)r=n[i],o.isObject(r)?s[i]=t(s[i],r):r||delete s[i];return s}(t,e=function(t){var e,r={};for(e in t)t[e]&&o.forEachKeyInKeypath(r,e,n);return r}(e)):{}},exposeModule:function(t,e,n,r,i){n?(r&&r.exports&&(n=r.exports=t),n.validate=t):(e.validate=t,t.isFunction(i)&&i.amd&&i([],(function(){return t})))},warn:function(t){"undefined"!=typeof console&&console.warn&&console.warn("[validate.js] "+t)},error:function(t){"undefined"!=typeof console&&console.error&&console.error("[validate.js] "+t)}}),i.validators={presence:function(t,e){if(!1!==(e=o.extend({},this.options,e)).allowEmpty?!o.isDefined(t):o.isEmpty(t))return e.message||this.message||"can't be blank"},length:function(t,e,n){if(o.isDefined(t)){var r,i=(e=o.extend({},this.options,e)).is,s=e.maximum,a=e.minimum,u=[],f=(t=(e.tokenizer||function(t){return t})(t)).length;return o.isNumber(f)?(o.isNumber(i)&&f!==i&&(r=e.wrongLength||this.wrongLength||"is the wrong length (should be %{count} characters)",u.push(o.format(r,{count:i}))),o.isNumber(a)&&f<a&&(r=e.tooShort||this.tooShort||"is too short (minimum is %{count} characters)",u.push(o.format(r,{count:a}))),o.isNumber(s)&&f>s&&(r=e.tooLong||this.tooLong||"is too long (maximum is %{count} characters)",u.push(o.format(r,{count:s}))),u.length>0?e.message||u:void 0):e.message||this.notValid||"has an incorrect length"}},numericality:function(t,e,n,r,i){if(o.isDefined(t)){var s,a,u=[],f={greaterThan:function(t,e){return t>e},greaterThanOrEqualTo:function(t,e){return t>=e},equalTo:function(t,e){return t===e},lessThan:function(t,e){return t<e},lessThanOrEqualTo:function(t,e){return t<=e},divisibleBy:function(t,e){return t%e==0}},c=(e=o.extend({},this.options,e)).prettify||i&&i.prettify||o.prettify;if(o.isString(t)&&e.strict){var l="^-?(0|[1-9]\\d*)";if(e.onlyInteger||(l+="(\\.\\d+)?"),l+="$",!new RegExp(l).test(t))return e.message||e.notValid||this.notValid||this.message||"must be a valid number"}if(!0!==e.noStrings&&o.isString(t)&&!o.isEmpty(t)&&(t=+t),!o.isNumber(t))return e.message||e.notValid||this.notValid||this.message||"is not a number";if(e.onlyInteger&&!o.isInteger(t))return e.message||e.notInteger||this.notInteger||this.message||"must be an integer";for(s in f)if(a=e[s],o.isNumber(a)&&!f[s](t,a)){var d="not"+o.capitalize(s),h=e[d]||this[d]||this.message||"must be %{type} %{count}";u.push(o.format(h,{count:a,type:c(s)}))}return e.odd&&t%2!=1&&u.push(e.notOdd||this.notOdd||this.message||"must be odd"),e.even&&t%2!=0&&u.push(e.notEven||this.notEven||this.message||"must be even"),u.length?e.message||u:void 0}},datetime:o.extend((function(t,e){if(!o.isFunction(this.parse)||!o.isFunction(this.format))throw new Error("Both the parse and format functions needs to be set to use the datetime/date validator");if(o.isDefined(t)){var n,r=[],i=(e=o.extend({},this.options,e)).earliest?this.parse(e.earliest,e):NaN,s=e.latest?this.parse(e.latest,e):NaN;return t=this.parse(t,e),isNaN(t)||e.dateOnly&&t%864e5!=0?(n=e.notValid||e.message||this.notValid||"must be a valid date",o.format(n,{value:arguments[0]})):(!isNaN(i)&&t<i&&(n=e.tooEarly||e.message||this.tooEarly||"must be no earlier than %{date}",n=o.format(n,{value:this.format(t,e),date:this.format(i,e)}),r.push(n)),!isNaN(s)&&t>s&&(n=e.tooLate||e.message||this.tooLate||"must be no later than %{date}",n=o.format(n,{date:this.format(s,e),value:this.format(t,e)}),r.push(n)),r.length?o.unique(r):void 0)}}),{parse:null,format:null}),date:function(t,e){return e=o.extend({},e,{dateOnly:!0}),o.validators.datetime.call(o.validators.datetime,t,e)},format:function(t,e){(o.isString(e)||e instanceof RegExp)&&(e={pattern:e});var n,r=(e=o.extend({},this.options,e)).message||this.message||"is invalid",i=e.pattern;if(o.isDefined(t))return o.isString(t)?(o.isString(i)&&(i=new RegExp(e.pattern,e.flags)),(n=i.exec(t))&&n[0].length==t.length?void 0:r):r},inclusion:function(t,e){if(o.isDefined(t)&&(o.isArray(e)&&(e={within:e}),e=o.extend({},this.options,e),!o.contains(e.within,t))){var n=e.message||this.message||"^%{value} is not included in the list";return o.format(n,{value:t})}},exclusion:function(t,e){if(o.isDefined(t)&&(o.isArray(e)&&(e={within:e}),e=o.extend({},this.options,e),o.contains(e.within,t))){var n=e.message||this.message||"^%{value} is restricted";return o.isString(e.within[t])&&(t=e.within[t]),o.format(n,{value:t})}},email:o.extend((function(t,e){var n=(e=o.extend({},this.options,e)).message||this.message||"is not a valid email";if(o.isDefined(t))return o.isString(t)&&this.PATTERN.exec(t)?void 0:n}),{PATTERN:/^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/i}),equality:function(t,e,n,r,i){if(o.isDefined(t)){o.isString(e)&&(e={attribute:e});var s=(e=o.extend({},this.options,e)).message||this.message||"is not equal to %{attribute}";if(o.isEmpty(e.attribute)||!o.isString(e.attribute))throw new Error("The attribute must be a non empty string");var a=o.getDeepObjectValue(r,e.attribute),u=e.comparator||function(t,e){return t===e},f=e.prettify||i&&i.prettify||o.prettify;return u(t,a,e,n,r)?void 0:o.format(s,{attribute:f(e.attribute)})}},url:function(t,e){if(o.isDefined(t)){var n=(e=o.extend({},this.options,e)).message||this.message||"is not a valid url",r=e.schemes||this.schemes||["http","https"],i=e.allowLocal||this.allowLocal||!1,s=e.allowDataUrl||this.allowDataUrl||!1;if(!o.isString(t))return n;var a="^(?:(?:"+r.join("|")+")://)(?:\\S+(?::\\S*)?@)?(?:",u="(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";return i?u+="?":a+="(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})",a+="(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*"+u+")(?::\\d{2,5})?(?:[/?#]\\S*)?$",s&&(a="(?:"+a+")|(?:^data:(?:\\w+\\/[-+.\\w]+(?:;[\\w=]+)*)?(?:;base64)?,[A-Za-z0-9-_.!~\\*'();\\/?:@&=+$,%]*$)"),new RegExp(a,"i").exec(t)?void 0:n}},type:o.extend((function(t,e,n,r,i){if(o.isString(e)&&(e={type:e}),o.isDefined(t)){var s,a=o.extend({},this.options,e),u=a.type;if(!o.isDefined(u))throw new Error("No type was specified");if(s=o.isFunction(u)?u:this.types[u],!o.isFunction(s))throw new Error("validate.validators.type.types."+u+" must be a function.");if(!s(t,a,n,r,i)){var f=e.message||this.messages[u]||this.message||a.message||(o.isFunction(u)?"must be of the correct type":"must be of type %{type}");return o.isFunction(f)&&(f=f(t,e,n,r,i)),o.format(f,{attribute:o.prettify(n),type:u})}}}),{types:{object:function(t){return o.isObject(t)&&!o.isArray(t)},array:o.isArray,integer:o.isInteger,number:o.isNumber,string:o.isString,date:o.isDate,boolean:o.isBoolean},messages:{}})},i.formatters={detailed:function(t){return t},flat:o.flattenErrorsToArray,grouped:function(t){var e;for(e in t=o.groupErrorsByAttribute(t))t[e]=o.flattenErrorsToArray(t[e]);return t},constraint:function(t){var e;for(e in t=o.groupErrorsByAttribute(t))t[e]=t[e].map((function(t){return t.validator})).sort();return t}},i.exposeModule(i,this,t,e,n.amdD)}.call(this,e,t,n.amdD)}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{"use strict";var t=n(765);class e{constructor(t){this.event=t.event,this.tags=t.tags||[],this.url=t.url,this.title=t.title,"string"==typeof t.ts?this.ts=new Date(t.ts):t.ts||(this.ts=new Date);try{this.validate()}catch(t){throw t instanceof Error&&console.error(t.message),new Error("Can`t create event.")}}static createInstance(t){return new e(t)}validate(){let e={event:{presence:!0,type:"string"},url:{url:{allowLocal:!0}},title:{presence:!0,type:"string"},tags:t=>{try{t.every((t=>{if("string"!=typeof t)throw new Error("Tag must be a string")}))}catch(t){return{tags:{message:t instanceof Error?t.message:"Tags not valid."}}}return null},ts:t=>t instanceof Date&&"Invalid Date"!==t.toDateString()?null:{ts:{message:"Date not valid"}}};(0,t.validate)({event:this.event,url:this.url,title:this.title,tags:this.tags,ts:this.ts},e)}}const r=new class{constructor(t){this.newEvent=(t,...n)=>{const r=new e({event:t,tags:[...n],url:"test",title:"title"});this.buffer.push(r),this.checkSend()},this.sendBufferThrottle=function(t,e,n){var r,i=n||{},o=i.noTrailing,s=void 0!==o&&o,a=i.noLeading,u=void 0!==a&&a,f=i.debounceMode,c=void 0===f?void 0:f,l=!1,d=0;function h(){r&&clearTimeout(r)}function m(){for(var n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];var a=this,f=Date.now()-d;function m(){d=Date.now(),e.apply(a,i)}function p(){r=void 0}l||(u||!c||r||m(),h(),void 0===c&&f>t?u?(d=Date.now(),s||(r=setTimeout(c?p:m,t))):m():!0!==s&&(r=setTimeout(c?p:m,void 0===c?t-f:t)))}return m.cancel=function(t){var e=(t||{}).upcomingOnly,n=void 0!==e&&e;h(),l=!n},m}(1e3,this.sendBuffer),this.sender=new t,this.buffer=[],this.eventToSend=[]}checkSend(){this.buffer.length>=3?this.forceSendBuffer():this.sendBufferThrottle()}forceSendBuffer(){this.sendBufferThrottle.cancel({upcomingOnly:!0}),this.sendBuffer()}sendBuffer(){return t=this,e=void 0,r=function*(){if(this.buffer.length){this.eventToSend=[...this.buffer],this.buffer=[];try{yield this.sender.send(this.eventToSend),this.eventToSend=[]}catch(t){this.returnToBooferEventToSend(),this.checkSend()}}},new((n=void 0)||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}));var t,e,n,r}returnToBooferEventToSend(){this.buffer.unshift(...this.eventToSend),this.eventToSend=[]}}(class{constructor(){this.send=t=>{return e=this,n=void 0,i=function*(){const e=yield window.fetch("http://localhost:8001/track",{method:"POST",headers:{"content-type":"text/plain;charset=UTF-8"},body:JSON.stringify(t)}),n=yield e.text();if("success"===n)return n;throw new Error(n)},new((r=void 0)||(r=Promise))((function(t,o){function s(t){try{u(i.next(t))}catch(t){o(t)}}function a(t){try{u(i.throw(t))}catch(t){o(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(s,a)}u((i=i.apply(e,n||[])).next())}));var e,n,r,i}}});window.tracker={track(...t){r.newEvent(...t)}},window.addEventListener("beforeunload",(t=>{r.forceSendBuffer(),t.preventDefault()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,